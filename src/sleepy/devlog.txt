TODO

  => Add OAuth2 support
    
    DONE

  => Re-evaluate the App class as the core of the library, consider separating
     responses, and having routing done via a singleton router class.
     Let the App class be used to make sure all errors are properly handled and
     that responses are of the correct format.

     Use php password_hash method for salts

     DONE

  => Update RoutedController to use prefixes on response methods

      class HelloController ... {
        ...
        public function get_world($args){
          ...
        }

        public function post_bye($args){
          ...
        }

        public function index(){
        }
      }

      DONE

  => Update Model create method to first create blank Model, then set properties
     to any given values and call save to create, that way we can create new models
     but can't save without setting the required variables, and creations happen 
     solely in save code.


     DONE

  => Implement some sort of migrations thingy, I'm thinking along the lines of 
     a JSON file, that keeps track of db changes and allows reverting back and 
     forth by recreating sql based on applying the changes to the original
     migration schema.

  => Models::update method to write updates to a bunch of methods, probably using
     query objects.

  => Create class that resolves to a SQL string, and allow chaining of commands 
     to create more complex query strings which can be fed to a Models::fetch,
     Models::delete, and Models::update

     'DELETE FROM `table` WHERE `name` LIKE '%chris%' AND `age` = 25;
     Query::on('table')->delete(['name' => ['like', '%chris%'], 'age' => 25]))
     DbManager::fetchAll('table', [''])


     Query::rawSelect('SELECT FROM  `table` WHERE `name` LIKE `this`');
     Query::rawExecute('DELETE FROM  `table` WHERE `name` LIKE `this`');
     You know what, scrap query constructors, why hide the power of SQL, add a
     custom query slot in Model::fetch, delete, update
  => Remove any methods that require $app argument, since app is static and can
     be retrieved from anywhere

  => Update routing to allow input types to be specified in routes, like Django
     that way you use regular expression to get everything in the format you want
     without the need to further sanitize( you can't escape my regex )

  => Don't run get params on RoutedControllers, they have $args value which captures
     all arguments, they don't provide type checking just yet, these are gonna be a bit
     more tricky than other routes

  => Pass routes' parsed named arguments to function call, so you can do
     this

      route(['hey/:name/:age/' => function($name, $age){...}])


  => Update DbManager, or rather create Query objects, which can be run bare,
     and return standard objects, or pass it to Models::<crud>() method to
     return Models. That way non "select" statements wont run a "fetch" to 
     return the newly edited model or inserted model like they normally do
     with Model::create, therefore making it faster

  => Review all TODO comments
